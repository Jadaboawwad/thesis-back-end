# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Log Action types"""
enum Actions {
  BREAK
  IN
  LEAVE
  OUT
  SMOKE_BREAK
}

"""Employee contract type"""
enum ContractTypes {
  CONTRACTOR
  PERMENENT
  YEAR_1
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Employee gender"""
enum Genders {
  FEMALE
  MALE
}

"""Schema for Log model"""
type Log {
  actionType: Actions!
  description: String
  id: ID!
  isArchived: Boolean
  time: DateTime!
  user: User!
}

"""Response data for log"""
type LogResponse {
  log: Log!
}

"""Employee marital status"""
enum MaritalStatuses {
  DIVORCED
  MARRIED
  SINGLE
}

type Mutation {
  """Mutate for a product and create it"""
  createProduct(description: String, id: String, imageUrl: String, name: String): QueryProductResponse!

  """Mutate for a product and delete it"""
  deleteProduct(id: String): String!

  """Mutate for a product and update it"""
  updateProduct(description: String, id: String, imageUrl: String, name: String, selectedId: String): String!
}

"""Employee position"""
enum Positions {
  BACK_END
  DEVOPS
  FRONT_END
  MANAGER
  QA
  SOFTWARE_ENGINEER
}

"""Response for the product data"""
type Product {
  description: String!
  id: String!
  imageUrl: String!
  name: String!
}

type Query {
  """Query for a list of Log"""
  getAllLogs: [LogResponse!]

  """Query for a list of Products"""
  getAllProducts: QueryProductsResponse!

  """Query for a list of User"""
  getAllUsers: QueryUsersResponse!

  """Query for a product in Products list"""
  getProduct(id: String!): QueryProductResponse!
  getUser(id: String!): QueryUserResponse!
  team(id: String!): Team!
}

"""Response data for product by id"""
type QueryProductResponse {
  product: Product
}

"""Response data for products data"""
type QueryProductsResponse {
  products: [Product!]
}

"""Response data for user by id"""
type QueryUserResponse {
  user: User
}

"""Response data for users"""
type QueryUsersResponse {
  users: [User!]
}

type Team {
  id: ID!
}

"""Resoponse for the user data"""
type User {
  SSN: String!
  bio: String
  birthday: DateTime
  contractType: ContractTypes
  email: String!
  firstName: String!
  fullName: String!
  gender: Genders!
  id: ID!
  isBanned: Boolean
  isSmoker: Boolean
  lastName: String!
  maritalStatuses: MaritalStatuses!
  offDays: Int!
  position: Positions
  profileImageUrl: String
  startedAt: DateTime
  team: Team
}
